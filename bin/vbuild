#!/usr/bin/python


import optparse
import sys
import os.path as osp
import subprocess

def test_arch(target_arch):
    """return True if the arch of localhost is target_arch"""
    cmd = ['dpkg-architecture', '-e%s' % target_arch]
    status = subprocess.call(cmd)
    return status == 0

def build(source_control, distribution, arch, resultdir, basetgz,
          binary_arch=False, orig_tarball=None):
    substitutions = {'distrib': distribution,
                     'arch': arch,
                     }
    resultdir %= substitutions
    basetgz %= substitutions
    
    cmd = ['sudo', 'pbuilder', '--build',
           '--buildresult', resultdir,
           '--basetgz', basetgz,
           source_control]
    if binary_arch:
        cmd.insert(-2, '--binary-arch')
    subprocess.check_call(cmd)
    

def run():
    parser = optparse.OptionParser()
    parser.add_option('-d', '--distribution',
                      default="sid", help="target distribution")
    parser.add_option('-a', '--arch',
                      default=None, help="target architecture (defaults to local host's arch)")
    parser.add_option('-b', '--binary-arch',
                      default=False, action='store_true',
                      help="only build arch-specific targets instead of all targets")
    parser.add_option('-o', '--orig',
                      help='path to orig.tar.gz tarball (used when debian revision is > 1)')
    parser.add_option('-r', '--result',
                      help = 'directory where the build results is stored. '
                             'The strings "%(distrib)s" and "%(arch)s" will be substituted '
                             '[default: %default]',
                      default = '/opt/buildd/%(distrib)s')
    parser.add_option('--basetgz',
                      help='path to the base tar.gz archive'
                           'The strings "%(distrib)s" and "%(arch)s" will be substituted '
                           '[default: %default]',
                      default = '/opt/buildd/%(distrib)s.tgz')
    usage = '%prog [options] <dsc file>'

    options, arguments = parser.parse_args()
    
    if not(options.arch is None or test_arch(options.arch)):           
        parser.error('Cross building not supported for now')

    if len(arguments) != 1:
        parser.error('Missing argument : debian source control file (package_version.dsc)')
    dscfile = arguments[-1]
    if not osp.isfile(dscfile):
        parser.error('Cannot find %s' % dscfile)

    build(arguments[-1],
          options.distribution,
          options.arch,
          options.result,
          options.basetgz,
          options.binary_arch,
          options.orig
          )
    
    
if __name__ == '__main__':
    run()
